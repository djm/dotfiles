# ~/.bashrc
# Author: Darian Moody
# License: 2-clause BSD

# If not running interactively, don't do anything.
[[ $- != *i* ]] && return

export LC_CTYPE=en_GB.UTF-8
export LC_ALL=en_GB.UTF-8
export LANG=en_GB.UTF-8

PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
PATH=$PATH:~/bin
PATH=$PATH:/usr/local/go/bin
PATH=$PATH:/usr/local/terraform
export PATH=$PATH

export EDITOR=vim

# Aliases
alias ..='cd ..'

# Aliases - Python
alias clearpyc='find . -name "*.pyc" -exec rm -rf {} \;'
alias serve='python -m SimpleHTTPServer'
alias jsonify='python -mjson.tool'

# Aliases - Docker
alias dc='docker-compose'
alias dm='docker-machine'
alias dexec='docker exec -it'
alias dc-dev='docker-compose -f docker-compose-dev.yml'
alias dc-prod='docker-compose -f docker-compose-prod.yml'
alias b2d='$(boot2docker shellinit)'

# Aliases - Screen
alias screen-list="screen -ls"
alias screen-attach="screen -dRR"

# Aliases - Vagrant
alias v='vagrant'
alias vup='vagrant up'
alias vssh='vagrant ssh'
alias vin='vagrant up && vagrant ssh'
alias vh='vagrant halt'
alias vd='vagrant destroy'
alias vr='vagrant reload'
alias vp='vagrant provision'

# Aliases - Git
alias gb='git blame'
alias gc='git commit'
alias gco='git checkout'
alias gd='git diff'
alias gm='git merge'
alias gp='git push'
alias gr='git rebase'
alias gs='git status'
alias gref='git reflog'
alias gshow='git show'

# Aliases - Go
alias gob='godep go build'

# Aliases - Elixir
alias mc='mix compile'
alias mdg='mix deps.get'
alias mdc='mix deps.clean'

# History
export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=100000
export HISTFILESIZE=100000
shopt -s histappend
# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

export CLICOLOR=1

# Cloud credentials
CLOUD_CREDENTIALS="$HOME/.cloud_credentials"
if [ -f $CLOUD_CREDENTIALS ]
then
    source $CLOUD_CREDENTIALS
fi

# Use bash-completion, if available
[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && \
    . /usr/share/bash-completion/bash_completion

# Bash completion for git.
if [ -f ~/dotfiles/git/completion/git-completion.bash ]; then
    . ~/dotfiles/git/completion/git-completion.bash
fi

if [ -f ~/dotfiles/git/completion/git-prompt.sh ]; then
    . ~/dotfiles/git/completion/git-prompt.sh
fi

# Bash completion for git flow.
if [ -f ~/dotfiles/git/completion/git-flow-completion.bash ]; then
    . ~/dotfiles/git/completion/git-flow-completion.bash
fi

# Turns home dir into ~; truncates when `pwd` too long.
truncated_pwd() {
    # How many characters of the $PWD should be kept
    local pwdmaxlen=25
    # Indicate that there has been dir truncation
    local trunc_symbol=".."
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]
    then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
}

# Print nickname for git/hg/bzr/svn version control in CWD
# Optional $1 of format string for printf, default "(%s) "
function get_branch {
  local dir="$PWD"
  local vcs
  local nick
  while [[ "$dir" != "/" ]]; do
    for vcs in git hg svn bzr; do
      if [[ -d "$dir/.$vcs" ]] && hash "$vcs" &>/dev/null; then
        case "$vcs" in
          git) __git_ps1 "${1:-(%s) }"; return;;
          hg) nick=$(hg branch 2>/dev/null);;
          svn) nick=$(svn info 2>/dev/null\
                | grep -e '^Repository Root:'\
                | sed -e 's#.*/##');;
        esac
        [[ -n "$nick" ]] && printf "${1:-(%s) }" "$nick"
        return 0
      fi
    done
    dir="$(dirname "$dir")"
  done
}

set_ps1() {
    case $TERM in
     xterm*|rxvt*)
         local TITLEBAR='\[\033]0;\h: \W\007\]'
          ;;
     *)
         local TITLEBAR=""
          ;;
    esac
    local NONE="\[\033[0m\]"    # unsets color to term's fg color

    # regular colors
    local K="\[\033[1;30m\]"    # black
    local R="\[\033[1;31m\]"    # red
    local G="\[\033[1;32m\]"    # green
    local Y="\[\033[1;33m\]"    # yellow
    local B="\[\033[1;34m\]"    # blue
    local M="\[\033[1;35m\]"    # magenta
    local C="\[\033[1;36m\]"    # cyan
    local W="\[\033[1;37m\]"    # white

    # emphasized (bolded) colors
    local EMK="\[\033[1;30m\]"
    local EMR="\[\033[1;31m\]"
    local EMG="\[\033[1;32m\]"
    local EMY="\[\033[1;33m\]"
    local EMB="\[\033[1;34m\]"
    local EMM="\[\033[1;35m\]"
    local EMC="\[\033[1;36m\]"
    local EMW="\[\033[1;37m\]"

    local UC=$EMG                 # user's color
    [ $UID -eq "0" ] && UC=$EMR   # root's color

    PS1="$TITLEBAR${W}[${UC}\u${B}:\${NEW_PWD}${M}\$(get_branch ":%s")${W}]\n${UC}\\$ ${NONE}"
}


PROMPT_COMMAND=truncated_pwd
export GIT_PS1_SHOWDIRTYSTATE=yes
set_ps1
unset set_ps1

# Python
VIRTUALENV_WRAPPER='/usr/local/bin/virtualenvwrapper.sh'
if [ -f $VIRTUALENV_WRAPPER ]
then
    source $VIRTUALENV_WRAPPER
fi

# Ruby & RVM
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

RVM_DIR="$HOME/.rvm"
if [ -f $RVM_DIR ]
then
    export PATH="$PATH:$HOME/.rvm/bin"
fi


# Go
export GOPATH=$HOME/src/golang
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN

# Google App Engine SDK
APPENGINE_SDK='/usr/local/google_appengine/'
if [ -f $APPENGINE_SDK ]
then
    export PYTHONPATH="$APPENGINE_SDK:$PYTHONPATH"
fi

# Heroku Toolbelt
HEROKU_TOOLBELT='/usr/local/heroku/bin'
if [ -f $HEROKU_TOOLBELT ]
then
    export PATH="$HEROKU_TOOLBELT:$PATH"
fi

# Node
[[ -s /Users/djm/.nvm/nvm.sh ]] && . /Users/djm/.nvm/nvm.sh

# Java
export JAVA_HOME="/usr"

# PHP
alias composer="php /usr/local/bin/composer.phar"

# AWS Auto Scaling Tools
export AWS_AUTO_SCALING_HOME="/usr/local/AutoScaling-1.0.61.6"
export PATH=$PATH:$AWS_AUTO_SCALING_HOME/bin
export AWS_CREDENTIAL_FILE="$HOME/.aws-credential-file"

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
